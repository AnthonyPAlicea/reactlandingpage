---
metaTitle: Understanding React by Tony Alicea
---

{% extends 'page.njk' %}

{% block head %}
<style>
  
</style>
{% endblock %}

{% block body %}
<hgroup>
  <h1 class="tony-card__title">Understanding React</h1>
  <p>Master React by learning how it works</p>
  <p class="credit"><img src="assets/tonyalicea.png" style="height: 30px;" /> &nbsp;&nbsp;by Tony Alicea</p>
</hgroup>
<hr />
<section class="container">
  <p>React is a skill that can get you a job. But most courses out there aren't teaching it to you properly.</p>
  <p>Following along and mimicking someone typing code won't help you when faced with new problems and challenges in real world jobs.</p>
  <p>This course is different.</p>
</section>

<section class="container">
  <h2>What This Course Isn't</h2>
  <p>
    This course is not a "follow along with me while we build projects" course. Yes, we build a fun project in the course (we recreate the popular online word game "Spelling Bee"!).
  </p>
  <p>
    Building projects is an important part of learning. However those "build projects with me" courses are a trap.
  </p>
  <h3>The GPS Trap</h3>
  <div class="imagegrid">
  <img src="/assets/gps.png" alt="A phone with a GPS app open" />
  <p>Following along with someone else coding, without understanding what's really happening under-the-hood, is kind of like following a GPS to your destination.<br /><br />When you get there, you may feel good. But you haven't really learned the streets or the area. If you run across a problem, like construction or a detour, and you don't have your GPS working, you quickly realize that you haven't really learned anything following the GPS.</p>
  </div>
  <p>That's the trap. When you just follow along with someone else coding a project, you may feel like you're learning, but when you start real-world work and you're asked to do things that aren't exactly like the projects you've done, or you face a problem that needs to be debugged...you realize that you haven't learned that much after all.</p>
  <p>So...what's the answer?</p> 
  <h2>What This Course Is</h2>
  <div class="imagegrid imagegrid--large">
  <img class="map" src="/assets/map.png" alt="A map of a city" />
  <p>Thinking about our GPS example, this course is more like a complete map, along with the history of <em>why</em> the city is laid out the way it is.<br /><br />In this course we go, step-by-step, through <em>why</em> React is built the way it is, and we <strong>go through its source code</strong> to see how it's built and what it does.</p>
  </div>
  <p>That's right: React is just other people's JavaScript code. By understanding what is happening under-the-hood, you'll dramatically improve your ability to write and debug apps using React. You'll gain a proper mental model.</p>
  <h3>A Proper Mental Model</h3>
  <p>A "mental model" is basically how you think something works. The more accurate your mental model, the better you can use that thing and the better you can fix problems when they arise.</p>
  <p>I read every line of React's source code so that I can impart you to an <strong>accurate mental model</strong>, meaning that you <strong>actually know how React works</strong>.</p>
  <p>An accurate mental model is the most valuable thing a coder can have when using a tool like React. You'll be faster at writing apps and better at debugging them (both your own code and others').</p>
</section>

<section class="container">
  <h2>Vocabulary Is Not Intelligence</h2>
  <div class="imagegrid">
  <img class="map" src="/assets/brainbulb.png" style="max-height: 200px;" alt="A cartoon brain with a lightbulb and exclamation marks above it. It understands." />
  <p>A common barrier to learning tech is vocabulary. In this course I don't make assumptions about the words that you're familiar with.<br /><br />For example, when we look deep into React's code we see a lot of usage of linked lists. So, in this course, we will first take a moment to understand what a linked list data structure is, and why it's useful in React's case.</p>
  </div>
  <p>In fact, we'll pause briefly, but often, to make sure everything we're talking about in the course is fully understood. You'll be building a vocabulary that you'll be able to use at work, when watching or reading other content, and in your career going forward.</p>
  <p>Sometimes we mistake vocabulary for intelligence. But if there's a term or idea that's new to you while learning tech, that doesn't say anything about how smart you are. You just need to learn the vocabulary. You'll learn it in this course.</p>
</section>

<section class="container">
  <h2>Understand React Internals</h2>
  <p>We won't just look at code. I've put together literally hundreds of animations so that you can visualize what the React is doing internally and fully understand it.</p>
  <div><video loop autoplay muted playsinline aria-labelledby="video-label" src="/assets/ReactCompiler_Hooks.mp4"></video></div>
  <p>Then, we put that newfound mental model to use as we build your React knowledge piece-by-piece, and work through code examples together.</p>
</section>

<section class="container">
  <h2>The Curriculum</h2>
  <p>The course contains <b>16.5 hours of video</b> and is split into <b>27 modules</b>. It is designed to be useful and accessible for <strong>both devs completely new to React, and devs who have been using React for years</strong>.</p>
  <p>The course covers a wide range of topics in a logical, progressive order. From JSX to Hooks to State and Context to React Server Components and so much more.</p>
  <p><b>Here's the full curriculum</b> (select a module for more details):<br /><br /></p><hr />
  <details><summary>Introduction</summary>
<ul>
  <li>Introduction</li>
  <li>Setup</li>
  <li>A Basic React App</li>
  <li>The React Source Code</li>
</ul>
</details>
<details><summary>The DOM and Declarative Programming</summary>
<ul>
  <li>The DOM and Declarative Programming</li>
  <li>HTML and Trees</li>
  <li>HTML, The Browser, and the DOM</li>
  <li>DOM Manipulation</li>
  <li>Conceptual Aside: Imperative vs. Declarative Programming</li>
  <li>The DOM and Imperative Programming</li>
  <li>The DOM and Declarative Programming</li>
</ul>
</details>
<details><summary>React Elements</summary>
<ul>
  <li>React Elements</li>
  <li>Conceptual Aside: Recursion</li>
  <li>Conceptual Aside: POJOs</li>
  <li>Creating React Elements</li>
  <li>React Element Trees</li>
  <li>Conceptual Aside: DOM Element References</li>
  <li>React Elements and DOM Elements</li>
  <li>React DOM Updates</li>
</ul>
</details>
<details><summary>Components</summary>
<ul>
  <li>Components</li>
  <li>Components and Reusability</li>
  <li>Conceptual Aside: Pure Functions</li>
  <li>Props</li>
  <li>Template Logic</li>
  <li>Element Properties</li>
</ul>
</details>
<details><summary>JSX</summary>
<ul>
  <li>JSX</li>
  <li>Conceptual Aside: Markup and Tree Creation Shorthand</li>
  <li>Conceptual Aside: Transformation</li>
  <li>React Elements and JSX</li>
  <li>JSX and Thinking In Elements</li>
  <li>Conceptual Aside: HTML Authoring</li>
  <li>Fragment and HTML Authoring</li>
</ul>
</details>
<details><summary>Fiber and Reconciliation</summary>
<ul>
  <li>Fiber and Reconciliation</li>
  <li>Root Creation and render</li>
  <li>Conceptual Aside: Trees and Linked Lists</li>
  <li>Fiber, Fiber Nodes, and Fiber Trees</li>
  <li>Conceptual Aside: Tree Reconciliation and the Tree Edit Distance Problem</li>
  <li>Work-In-Progress Nodes</li>
  <li>Reconciliation and Work</li>
</ul>
</details>
<details><summary>Execution Contexts and Pausing Work</summary>
<ul>
  <li>Execution Contexts</li>
  <li>Conceptual Aside: Execution Contexts and the Event Loop</li>
  <li>Fiber and Custom Execution Contexts</li>
  <li>Units of Work and The Work Loop</li>
  <li>Conceptual Aside: Equality</li>
  <li>Beginning, Completing, Bailing Out and Pausing Work</li>
  <li>Lanes and Priority</li>
</ul>
</details>
<details><summary>React DOM and Rendering</summary>
<ul>
  <li>React DOM and Rendering</li>
  <li>Committing Work and The Renderer</li>
  <li>Mounting, Updating, and Unmounting</li>
</ul>
</details>
<details><summary>Events</summary>
<ul>
  <li>Events</li>
  <li>DOM Events</li>
  <li>React Event Objects</li>
  <li>Synthetic Event Properties and Methods</li>
</ul>
</details>
<details><summary>State</summary>
<ul>
  <li>State</li>
  <li>Conceptual Aside: State Machines</li>
  <li>Conceptual Aside: Pure Functions (again)</li>
  <li>UI: A Function of State</li>
  <li>Conceptual Aside: Reducers</li>
  <li>Actions and State</li>
</ul>
</details>
<details><summary>Hooks, State, and Reducers</summary>
<ul>
  <li>Hooks and State</li>
  <li>Fibers, Hooks, and State</li>
  <li>Conceptual Aside: Queues</li>
  <li>Update Queues</li>
  <li>State and Re-renders</li>
  <li>useReducer (Part 1)</li>
  <li>useReducer (Part 2)</li>
  <li>useState (Part 1)</li>
  <li>useState (Part 2)</li>
  <li>Rules of Hooks</li>
  <li>useState (Part 3)</li>
</ul>
</details>
<details><summary>Conceptual Aside: Shallow Equality and Object.is</summary>
<ul>
  <li>Conceptual Aside: Shallow Equality and Object.is</li>
  <li>Immutable State</li>
</ul>
</details>
<details><summary>Adding Your Own Side Effects: useEffect</summary>
<ul>
  <li>Adding Your Own Side Effects: useEffect</li>
  <li>Conceptual Aside: Pure Functions and Side Effects</li>
  <li>Adding Your Own Effects</li>
  <li>Dependencies</li>
  <li>A Game of Ping Pong</li>
  <li>Unmounting and Effects</li>
  <li>Fetching Data...or not</li>
  <li>Conceptual Aside: Stale Closures</li>
  <li>useEffect and Stale Closures</li>
  <li>What Not to Do</li>
</ul>
</details>
<details><summary>useRef and forwardRef</summary>
<ul>
  <li>useRef and forwardRef</li>
  <li>useRef</li>
  <li>useRef and the DOM</li>
  <li>forwardRef</li>
</ul>
</details>
<details><summary>Custom Hooks</summary>
<ul>
  <li>Custom Hooks</li>
  <li>Extracting Custom Hooks</li>
</ul>
</details>
<details><summary>Component Design</summary>
<ul>
  <li>Component Design</li>
  <li>Real World Complexity and Loops</li>
  <li>Lifting State Up</li>
  <li>&&, 0, and Ternary Operators</li>
  <li>Children</li>
</ul>
</details>
<details><summary>useContext</summary>
<ul>
  <li>useContext</li>
  <li>Prop Drilling</li>
  <li>Context</li>
  <li>Context with Caution</li>
</ul>
</details>
<details><summary>useId and Key</summary>
<ul>
  <li>useId and Key</li>
  <li>useId</li>
  <li>Key</li>
</ul>
</details>
<details><summary>memo, useMemo, and useCallback</summary>
<ul>
  <li>memo, useMemo, and useCallback</li>
  <li>Conceptual Aside: Memoization</li>
  <li>memo</li>
  <li>useMemo</li>
  <li>useCallback</li>
  <li>React Forget</li>
</ul>
</details>
<details><summary>useContext and Reducer</summary>
<ul>
  <li>useContext and Reducer</li>
  <li>useContext + Reducer</li>
</ul>
</details>
<details><summary>3rd Party State Management</summary>
<ul>
  <li>3rd Party State Management</li>
</ul>
</details>
<details><summary>Toolchains</summary>
<ul>
  <li>Toolchains</li>
  <li>Conceptual Aside: Toolchains</li>
  <li>Conceptual Aside: ES Modules</li>
  <li>Create React App</li>
  <li>Vite</li>
  <li>Frameworks</li>
</ul>
</details>
<details><summary>Strict Mode</summary>
<ul>
  <li>Strict Mode</li>
  <li>Adding Strict Mode</li>
  <li>Extra Re-render</li>
  <li>Extra Effect Re-run</li>
</ul>
</details>
<details><summary>Forms</summary>
<ul>
  <li>Forms</li>
  <li>Reorganizing Our App</li>
  <li>Uncontrolled Inputs</li>
  <li>Controlled Inputs</li>
  <li>form</li>
  <li>textarea, select, and More</li>
  <li>3rd Party Form Help</li>
  <li>Future Form Features</li>
</ul>
</details>
<details><summary>React Dev Tools</summary>
<ul>
  <li>React Dev Tools</li>
  <li>Using Dev Tools</li>
  <li>useDebugValue</li>
</ul>
</details>
<details><summary>CSS and Components</summary>
<ul>
  <li>CSS and Components</li>
  <li>CSS and React</li>
  <li>Toolchains and CSS</li>
  <li>CSS Modules and more</li>
</ul>
</details>
<details><summary>Class Project</summary>
<ul>
  <li>Class Project</li>
  <li>Spelling Bee</li>
  <li>HTML Authoring</li>
  <li>Getting the Data</li>
  <li>Header</li>
  <li>Honeycomb</li>
  <li>Shuffle</li>
  <li>Words and Letters</li>
  <li>Word List</li>
  <li>Score</li>
  <li>Highlighted Letter</li>
  <li>Final Thoughts</li>
  <li>Things to Try</li>
</ul>
</details>
<details><summary>Meta-Frameworks</summary>
<ul>
  <li>Meta-Frameworks</li>
  <li>NextJS</li>
  <li>Remix</li>
</ul>
</details>
<details><summary>Suspense</summary>
<ul>
  <li>Suspense</li>
  <li>Suspense and Frameworks</li>
  <li>Suspense and Remix</li>
</ul>
</details>
<details><summary>React Server Components</summary>
<ul>
  <li>React Server Components</li>
  <li>Server Components</li>
  <li>Client Components and 'use client'</li>
  <li>RSC Payload</li>
  <li>Composing Client and Server Components</li>
</ul>
</details>
<details><summary>Conclusion</summary>
<ul>
  <li>Conclusion</li>
  <li>Thank you (and your feedback)!</li>
</ul>
</details>
<hr />
</section>

<section class="container">
  <hgroup class="quotes-header">
    <h2>What Others Are Saying</h2>
    <p>&#9733;&#9733;&#9733;&#9733;&#9733;</p>
  </hgroup>
  <div class="quotegrid">
    <article><p>I highly recommend this course! Even for devs who have worked in React for years. Tony’s way of digging through the source code under the hood has completely changed my mental model. Incredibly valuable.</p> <p>- Heather M.</p></article>
    <article><p>This is the best React course I have taken and I have taken a few to be honest. You have overdelivered on this Tony.</p> <p>- Eyitayo O.</p></article>
    <article><p>Thank you Tony, for spending the time to approach React from a deeper perspective.</p> <p>- Nicolas G.</p></article>
    <article><p>I have clear picture now how React is working under the hood. And also the last project was fun.</p> <p>- Matija R.</p></article>
    <article><p>As a self-taught developer who transitioned from education to tech, his teaching style resonates with my teacher training – exploring the “why” instead of just the “how”, gradual build up of concepts, simple explanation of technical jargons, etc. The feeling of true understanding is a deep satisfaction that hacky tricks will not achieve.</p> <p>- Shelly C.</p></article>
    <article><p>Remarkable course.</p> <p>- Nilkamal S.</p></article>
    <article><p>Magnificent!</p> <p>- Miroslav M.</p></article>
  </div>
</section>

<section class="container">
  <h2>Watch The First 6 Hours For Free</h2>
  <p>
    Still not sure if the course is for you? I put the first 6 hours of the course for free on my YouTube channel. So if you aren't sure, start watching!
  </p>
  <div class="video">
    <iframe width="560" height="315" style="max-width: 100%;" src="https://www.youtube.com/embed/-XKvVyC6si0?si=DSxDq9rSGyWijdO_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
  </div>
</section>

<section class="container aboutme-container">
  <h2>About Me</h2>
  <div class="aboutme">
    <div class="headshot"><img src="/assets/tonyheadshot.jpg" alt="Tony Alicea headshot" /></div>
    <p><b>Hi, I'm Tony Alicea.</b> I've been an application developer, database architect, UX designer, and tech educator for over 25 years.<br /><br /><strong>Over 350,000 students</strong> have enrolled in my courses on Udemy, Pluralsight, and Teachable (where this course is hosted). I've been a speaker at conferences like React Summit, the biggest React conference in the world. You can read more about me and my courses <a href="https://tonyalicea.dev/courses">on my site</a>.</p>
  </div>
</section>

<section class="container enroll-container">
  <hgroup>
    <a name="enroll"></a>
    <img class="altlogo" src="/assets/reactaltlogo.png" alt="React Logo" />
    <h2>Join and Gain Deep Understanding</h2>
    <p>An accurate mental model will forever benefit your dev career.
  </hgroup>
  <article class="enroll-form">
    <h3 class="enroll-header">Understanding React</h3>
    <p class="price" id="price">$149</p><!--<label style="display: none;">For Individuals&nbsp;&nbsp;<input name="teams" type="checkbox" role="switch" />For Teams</label>-->
    <p class="lifetime">Lifetime Access</p>
    <p class="lifetime">Tax/VAT Included</p>
    <a id="buy-link" href="https://dontimitateunderstand.com/purchase?product_id=4876170"><button>Buy Now</button></a>
    <p>INCLUDES</p>
    <ul class="enroll-list">
      <li>&check; 16.5 hours of deep dive video</li>
      <li>&check; 158 lectures</li>
      <li>&check; All source code</li>
      <li>&check; Certificate of completion</li>
      <li>&check; Questions answered by me personally</li>
      <li>&check; Free future updates</li>
    </ul>    
  </article>
</section>

<section class="container">
  <h2>FAQs</h2>
  <details>
    <summary>Do you offer team discounts?</summary>
    Yes! To request a discount for multiple seats for your team contact <a href="mailto:support@tonyalicea.dev">support@tonyalicea.dev</a>.
  </details>
  <details>
    <summary>Do you offer Purchasing Power Parity (PPP) or student discounts?</summary>
    Yes, I believe in PPP and student discounts. You can <a href="https://tonyalicea.dev/courses/understanding-react-ppp/">fill out a request form here</a>. PPP coupons are sent out every couple of weeks.
  </details>
  <details>
    <summary>Is this a subscription?</summary>
    No. This is a one time purchase for lifetime access to the course and all future updates.
  </details>
</section>

<script>
  const targetURL = 'https://dontimitateunderstand.com/purchase';
  const productID = '4876170';
  const setPrice = "SET_PRICE";
  const price = "LIST_PRICE";

  // Set price if coupon code passed
  if (setPrice === "YesSetPrice") {
    document.getElementById("price").innerHTML = '$' + price;
  }

  // Get the current URL's query string parameters
    const queryString = window.location.search;

  // Redirect to the target URL with the query string parameters
  document.getElementById("buy-link").href = targetURL + (queryString ? queryString + '&' : '?')+ 'product_id=' + productID; 
</script> 
{% endblock %}